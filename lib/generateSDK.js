const RequestParameterType = require("../index");
const fs = require("fs");
const package = require("../package.json");

const SdkFileName = "sdk";
const HooksFileName = "hooks";

const generateFile = (data, path) => {
  let currentFile = "";
  try {
    currentFile = fs.readFileSync(path) + "";
  } catch (e) {
  } finally {
    if (data !== currentFile) {
      fs.writeFileSync(path, data);
    }
  }
};

module.exports = (configs) => {
  const { files, prefix: appPrefix, path = process.cwd(), sdkFolder = "actions", disableSocket, socketPath, reactHooks } = configs;

  const dir = `${path}/${sdkFolder}`;
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir);
  }

  let sdkFile = `\n// This file is auto generated by '${package.name}' lib\n\n`;
  sdkFile += `import sdkFetch from "${package.name}/lib/client/fetcher"\n\n`;

  let hooksFile = `\n// This file is auto generated by '${package.name}' lib\n\n`;
  hooksFile += `import useSdkFetch from "${package.name}/lib/client/useFetcher"\n\n`;

  let actions = "";

  Object.keys(files)
    .sort()
    .forEach((prefix) =>
      files[prefix]
        .getRoutes()
        .sort((a, b) => (a.action < b.action ? -1 : 1))
        .forEach((route) => {
          let url = `${prefix}${route.path}`;

          const params = [];
          const query = [];
          const body = [];

          Object.entries(route.input || {}).forEach((entry) => {
            if (entry[1] === RequestParameterType.QUERY) query.push(entry[0]);
            else if (entry[1] === RequestParameterType.PARAM) params.push(entry[0]);
            else body.push(entry[0]);
          });

          if (query.length) url += "?";
          const queryString = query.map((k) => `${k}=${"${" + k + ' ?? ""}'}`).join("&");
          params.forEach((param) => (url = url.replace(`{${param}}`, `${"${" + param + "}"}`)));

          const actionInputs = [...params, ...query, ...body];
          const actionArgsStr = !query.length && !body.length && !params.length ? "" : `{${actionInputs.join(",")}}`;

          const bodyString = body.length ? `{${body.join(",")}}` : "";

          sdkFile += `export const ${route.action.name} = (${actionArgsStr}) => sdkFetch('${route.action.name}', '${route.method}', \`${url}${queryString}\`, ${
            actionArgsStr || "{}"
          } ${bodyString ? `, ${bodyString}` : ""});\n`;

          route.method === "GET" &&
            reactHooks &&
            (hooksFile += `export const ${route.action.name} = (${actionArgsStr}) => useSdkFetch('${route.action.name}', '${route.method}', \`${url}${queryString}\`, ${
              actionArgsStr || "{}"
            } ${bodyString ? `, ${bodyString}` : ""})\n`);

          actions += `${route.action.name}: '${route.action.name}',`;
        })
    );

  let indexFile = `\n// This file is auto generated by '${package.name}' lib\n\n`;
  indexFile += `import { setConfig } from "${package.name}/lib/client/fetcher"\n\n`;

  appPrefix && (indexFile += `setConfig({ baseUrl: '${appPrefix}', disableSocket: ${!!disableSocket}, socketPath: '${socketPath}' })\n\n`);

  indexFile += `/**
  *
  * @type {import("actionapi/lib/type").SetSdkConfig} setSdkConfig
  * @returns void
  */\n`;
  indexFile += "export const setSdkConfig = (globalconfig) => setConfig(globalconfig);\n\n";

  indexFile += "export const ACTIONS = {\n\n";
  indexFile += actions;
  indexFile += "\n}\n\n";

  indexFile += `export * as SDK from './${SdkFileName}'\n`;
  reactHooks && (indexFile += `export * as useSdk from './${HooksFileName}'`);

  generateFile(sdkFile, `${path}/${sdkFolder}/${SdkFileName}.js`);
  reactHooks && generateFile(hooksFile, `${path}/${sdkFolder}/${HooksFileName}.js`);
  generateFile(indexFile, `${path}/${sdkFolder}/index.js`);
};
