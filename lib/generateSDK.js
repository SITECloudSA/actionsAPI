const RequestParameterType = require("../index");
const fs = require("fs");
const package = require("../package.json");

module.exports = (configs) => {
  const { apiFiles, prefix: appPrefix, path = process.cwd(), sdkFile = "sdk.gen.js" } = configs;

  let file = `\n// This file is auto generated by '${package.name}' lib\n\n`;
  file += `import sdkFetch, { setConfig } from "${package.name}/lib/fetcher"\n\n`;

  appPrefix && (file += `setConfig({ baseUrl: '${appPrefix}' })\n\n`);

  file += `/**
  *
  * @type {import("actionapi/lib/type").SetSdkConfig} setSdkConfig
  * @returns void
  */\n`;
  file += "export const setSdkConfig = (globalconfig) => setConfig(globalconfig);\n\n";

  file += "export const SDK = {\n\n";

  Object.keys(apiFiles)
    .sort()
    .forEach((prefix) =>
      apiFiles[prefix]
        .getRoutes()
        .sort((a, b) => (a.action < b.action ? -1 : 1))
        .forEach((route) => {
          let url = `${prefix}${route.path}`;

          const params = [];
          const query = [];
          const body = [];

          Object.entries(route.input || {}).forEach((entry) => {
            if (entry[1] === RequestParameterType.QUERY) query.push(entry[0]);
            else if (entry[1] === RequestParameterType.PARAM) params.push(entry[0]);
            else body.push(entry[0]);
          });

          if (query.length) url += "?";
          const queryString = query.map((k) => `${k}=${"${" + k + ' || ""}'}`).join("&");
          params.forEach((param) => (url = url.replace(`{${param}}`, `${"${" + param + "}"}`)));

          const actionInputs = [...params, ...query, ...body];
          const actionArgsStr = !query.length && !body.length && !params.length ? "" : `{${actionInputs.join(",")}}`;

          const bodyString = body.length ? `{${body.join(",")}}` : "";

          file += `${route.action.name}: (${actionArgsStr}) => sdkFetch('${route.action.name}', '${route.method}', \`${url}${queryString}\`, ${actionArgsStr || "{}"} ${
            bodyString ? `, ${bodyString}` : ""
          }),\n`;
        })
    );

  file += "\n}";

  let currentFile = "";
  try {
    currentFile = fs.readFileSync(`${path}/${sdkFile}`) + "";
  } catch (e) {
  } finally {
    if (file !== currentFile) {
      fs.writeFileSync(`${path}/${sdkFile}`, file);
    }
  }
};
